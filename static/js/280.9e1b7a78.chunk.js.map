{"version":3,"file":"static/js/280.9e1b7a78.chunk.js","mappings":"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","sources":["components/orders/Order/Order.jsx","components/orders/Orders.jsx","components/pagination/Pagination.jsx","utils/formatNumberAsPrice.js"],"sourcesContent":["import \"./Order.css\";\r\nimport formatNumberAsPrice from \"../../../utils/formatNumberAsPrice\";\r\nimport { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { updateOrderThunk } from \"../../../redux/slices/orderSlice\";\r\n\r\nexport default function Order({ orderDetails }) {\r\n  const dispatch = useDispatch();\r\n  const { isAuthenticated, user } = useSelector((state) => state.user);\r\n  const { isLoading } = useSelector((state) => state.order);\r\n  const [orderStatus, setOrderStatus] = useState(orderDetails?.orderStatus);\r\n\r\n  let orderDate = new Date(orderDetails?.orderDate).toDateString().split(\" \");\r\n  let orderDateDisplay = `${orderDate[0]} ${orderDate[1]} ${orderDate[2]}`;\r\n\r\n  let deliverDate = new Date(orderDetails?.deliveryDate)\r\n    .toDateString()\r\n    .split(\" \");\r\n  let deliverDateDisplay = `${deliverDate[0]} ${deliverDate[1]} ${deliverDate[2]}`;\r\n\r\n  let orderStatusDisplay =\r\n    orderDetails?.orderStatus.charAt(0).toUpperCase() +\r\n    orderDetails?.orderStatus.slice(1);\r\n\r\n  function updateOrder() {\r\n    dispatch(\r\n      updateOrderThunk({\r\n        orderId: orderDetails?.orderId,\r\n        orderStatus,\r\n      })\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"order\">\r\n      <div className=\"order__imageAndName\">\r\n        <div className=\"order__imageBox\">\r\n          <img\r\n            src={orderDetails.productImage}\r\n            alt=\"item\"\r\n            className=\"order__image\"\r\n          />\r\n        </div>\r\n        <div className=\"order__productName\">{orderDetails?.productName}</div>\r\n      </div>\r\n\r\n      <div className=\"order__info\">\r\n        <fieldset className=\"order__fieldset\">\r\n          <legend className=\"order__fieldsetTitle\">Price</legend>\r\n          {formatNumberAsPrice(orderDetails?.productPrice)}\r\n        </fieldset>\r\n\r\n        <fieldset className=\"order__fieldset\">\r\n          <legend className=\"order__fieldsetTitle\">Order Quantity</legend>\r\n          {orderDetails?.productQuantity}\r\n        </fieldset>\r\n\r\n        <fieldset className=\"order__fieldset\">\r\n          <legend className=\"order__fieldsetTitle\">Total Price</legend>\r\n          {formatNumberAsPrice(orderDetails?.productTotalPrice)}\r\n        </fieldset>\r\n\r\n        <fieldset className=\"order__fieldset\">\r\n          <legend className=\"order__fieldsetTitle\">Order Status</legend>\r\n\r\n          {isAuthenticated && user?.role === \"admin\" ? (\r\n            <select\r\n              className=\"order__statusSelect\"\r\n              value={orderStatus}\r\n              onChange={(e) => setOrderStatus(e.target.value)}\r\n            >\r\n              <option value=\"processing\" className=\"order__statusOption\">\r\n                Processing\r\n              </option>\r\n              <option value=\"shipped\" className=\"order__statusOption\">\r\n                Shipped\r\n              </option>\r\n              <option value=\"dispatched\" className=\"order__statusOption\">\r\n                Dispatched\r\n              </option>\r\n              <option value=\"delivered\" className=\"order__statusOption\">\r\n                Delivered\r\n              </option>\r\n            </select>\r\n          ) : (\r\n            orderStatusDisplay\r\n          )}\r\n        </fieldset>\r\n\r\n        <fieldset className=\"order__fieldset\">\r\n          <legend className=\"order__fieldsetTitle\">Order Date</legend>\r\n          {orderDateDisplay}\r\n        </fieldset>\r\n\r\n        {orderStatus !== \"delivered\" ? (\r\n          <fieldset className=\"order__fieldset\">\r\n            <legend className=\"order__fieldsetTitle\">\r\n              Estimated Delivery By\r\n            </legend>\r\n            {deliverDateDisplay}\r\n          </fieldset>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n\r\n        {isAuthenticated && user?.role === \"admin\" ? (\r\n          <button\r\n            className=\"order__updateButton\"\r\n            disabled={isLoading}\r\n            onClick={updateOrder}\r\n          >\r\n            Update\r\n          </button>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import \"./Orders.css\";\r\nimport Order from \"./Order/Order\";\r\nimport Pagination from \"../pagination/Pagination\";\r\nimport { useEffect, useRef } from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport {\r\n  getOrdersThunk,\r\n  getAllOrdersThunk,\r\n} from \"../../redux/slices/orderSlice\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport formatNumberAsPrice from \"../../utils/formatNumberAsPrice\";\r\n\r\nexport default function Orders() {\r\n  const shouldMakeGetOrdersCall = useRef(true);\r\n  const dispatch = useDispatch();\r\n\r\n  const { orders, pagination, totalOrdersPrice } = useSelector(\r\n    (state) => state.order\r\n  );\r\n  const { isAuthenticated, user } = useSelector((state) => state.user);\r\n\r\n  useEffect(() => {\r\n    if (shouldMakeGetOrdersCall.current === true) {\r\n      if (isAuthenticated && user.role === \"admin\") {\r\n        dispatch(getAllOrdersThunk(\"page=1\"));\r\n      } else if (isAuthenticated) {\r\n        dispatch(getOrdersThunk(\"page=1\"));\r\n      }\r\n\r\n      return () => {\r\n        shouldMakeGetOrdersCall.current = false;\r\n      };\r\n    }\r\n  }, [dispatch, isAuthenticated, user]);\r\n\r\n  if (!isAuthenticated) return <Navigate to=\"/\" replace />;\r\n\r\n  function onPrevPage(newPage) {\r\n    if (isAuthenticated && user.role === \"admin\") {\r\n      dispatch(getAllOrdersThunk(`page=${newPage}`));\r\n    } else if (isAuthenticated) {\r\n      dispatch(getOrdersThunk(`page=${newPage}`));\r\n    }\r\n  }\r\n\r\n  function onNextPage(newPage) {\r\n    if (isAuthenticated && user.role === \"admin\") {\r\n      dispatch(getAllOrdersThunk(`page=${newPage}`));\r\n    } else if (isAuthenticated) {\r\n      dispatch(getOrdersThunk(`page=${newPage}`));\r\n    }\r\n  }\r\n\r\n  function onPageNum(pNum) {\r\n    if (isAuthenticated && user.role === \"admin\") {\r\n      dispatch(getAllOrdersThunk(`page=${pNum}`));\r\n    } else if (isAuthenticated) {\r\n      dispatch(getOrdersThunk(`page=${pNum}`));\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"orders\">\r\n      {user?.role === \"admin\" ? (\r\n        <div className=\"orders__heading\">All Orders</div>\r\n      ) : (\r\n        <div className=\"orders__heading\">My Orders</div>\r\n      )}\r\n\r\n      <div className=\"orders__total\">\r\n        <div className=\"orders__totalHeading\">Total Orders Price</div>\r\n        <div className=\"orders__totalPrice\">\r\n          {formatNumberAsPrice(totalOrdersPrice)}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"orders__list\">\r\n        {orders != null ? (\r\n          orders.map((order) => {\r\n            return <Order key={order.orderId} orderDetails={order} />;\r\n          })\r\n        ) : (\r\n          <div className=\"orders__noOrdersFound\">No orders found!</div>\r\n        )}\r\n      </div>\r\n\r\n      {pagination != null ? (\r\n        <Pagination\r\n          paginationDetails={{\r\n            pageNum: pagination?.pageNum,\r\n            totalItems: pagination?.totalOrders,\r\n            itemsPerPage: pagination?.ordersPerPage,\r\n          }}\r\n          onPrevPage={onPrevPage}\r\n          onNextPage={onNextPage}\r\n          onPageNum={onPageNum}\r\n        />\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import \"./Pagination.css\";\r\nimport { useState } from \"react\";\r\n\r\nexport default function Pagination(paginationProps) {\r\n  const { paginationDetails, onPrevPage, onNextPage, onPageNum } =\r\n    paginationProps;\r\n\r\n  const [pageNum, setPageNum] = useState(\r\n    paginationDetails == null ? 1 : paginationDetails?.pageNum\r\n  );\r\n\r\n  let totalItems, itemsPerPage, paginationNumbers, paginationNumbersCount;\r\n\r\n  if (paginationDetails != null) {\r\n    totalItems = paginationDetails?.totalItems;\r\n    itemsPerPage = paginationDetails?.itemsPerPage;\r\n\r\n    paginationNumbers = [];\r\n\r\n    paginationNumbersCount = Math.ceil(totalItems / itemsPerPage);\r\n\r\n    for (let i = 0; i < paginationNumbersCount; i++) {\r\n      paginationNumbers.push(\r\n        <div\r\n          key={i + 1}\r\n          className={`pagination__numberButtons ${\r\n            pageNum === i + 1 ? \"active\" : \"\"\r\n          }`}\r\n          onClick={() => toPageNum(i + 1)}\r\n        >\r\n          {i + 1}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  function prevPage() {\r\n    let newPageNum = pageNum;\r\n    if (pageNum === 1) {\r\n      newPageNum = paginationNumbersCount;\r\n      setPageNum(newPageNum);\r\n    } else {\r\n      --newPageNum;\r\n      setPageNum(newPageNum);\r\n    }\r\n\r\n    onPrevPage(newPageNum);\r\n  }\r\n\r\n  function nextPage() {\r\n    let newPageNum = pageNum;\r\n    if (pageNum === paginationNumbersCount) {\r\n      newPageNum = 1;\r\n      setPageNum(newPageNum);\r\n    } else {\r\n      ++newPageNum;\r\n      setPageNum(newPageNum);\r\n    }\r\n\r\n    onNextPage(newPageNum);\r\n  }\r\n\r\n  function toPageNum(pNum) {\r\n    setPageNum(pNum);\r\n\r\n    onPageNum(pNum);\r\n  }\r\n\r\n  return paginationDetails?.pageNum != null ? (\r\n    <div className=\"pagination\">\r\n      <div className=\"pagination__previousButton\" onClick={prevPage}>\r\n        &lt;\r\n      </div>\r\n      {paginationNumbers}\r\n      <div className=\"pagination__nextButton\" onClick={nextPage}>\r\n        &gt;\r\n      </div>\r\n    </div>\r\n  ) : (\r\n    \"\"\r\n  );\r\n}\r\n","export default function formatNumberAsPrice(number) {\r\n  const priceFormatter = new Intl.NumberFormat(\"hi-in\", {\r\n    currency: \"INR\",\r\n    style: \"currency\",\r\n  });\r\n\r\n  return priceFormatter.format(number);\r\n}\r\n"],"names":["Order","_ref","orderDetails","dispatch","useDispatch","_useSelector","useSelector","state","user","isAuthenticated","isLoading","order","_useState","useState","orderStatus","_useState2","_slicedToArray","setOrderStatus","orderDate","Date","toDateString","split","orderDateDisplay","concat","deliverDate","deliveryDate","deliverDateDisplay","orderStatusDisplay","charAt","toUpperCase","slice","_jsxs","className","children","_jsx","src","productImage","alt","productName","formatNumberAsPrice","productPrice","productQuantity","productTotalPrice","role","value","onChange","e","target","disabled","onClick","updateOrderThunk","orderId","Orders","shouldMakeGetOrdersCall","useRef","orders","pagination","totalOrdersPrice","_useSelector2","useEffect","current","getAllOrdersThunk","getOrdersThunk","Navigate","to","replace","map","Pagination","paginationDetails","pageNum","totalItems","totalOrders","itemsPerPage","ordersPerPage","onPrevPage","newPage","onNextPage","onPageNum","pNum","paginationProps","paginationNumbers","paginationNumbersCount","setPageNum","Math","ceil","_loop","i","push","newPageNum","number","Intl","NumberFormat","currency","style","format"],"sourceRoot":""}